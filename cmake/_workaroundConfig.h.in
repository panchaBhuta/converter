/*
 * _workaroundConfig.h
 *
 * URL:      https://github.com/panchaBhuta/converter
 * Version:  v1.4
 *
 * Copyright (c) 2023-2025 Gautam Dhar
 * All rights reserved.
 *
 * converter is distributed under the BSD 3-Clause license, see LICENSE for details.
 *
 */

#pragma once

#cmakedefine01 e_ENABLE_FEATURE
#cmakedefine01 e_DISABLE_FEATURE


/*
 *  Date conversion typically uses std::chrono::from_stream() and
 *  std::chrono::to_stream(), which as of writing this code
 *  is NOT fully supported across all OS's.
 * 
 *  Till then, USE_DATELIB_FROMSTREAM and USE_DATELIB_TOSTREAM
 *  macro-variables are used to switch 
 *  "std::chrono" lib where possible(msvc -> from_stream),    OR 
 *  "date" lib (ubuntu, macOS -> from_stream+to_stream)       OR
 *  as last resort calls an internal implementation 
 *  (msvc -> to_stream), which has limited formating support.
 */
#cmakedefine01  USE_CHRONO_FROMSTREAM_1
#cmakedefine01  USE_DATE_FROMSTREAM_2
#cmakedefine01  USE_JUGAAD_FROMSTREAM_3

#cmakedefine01  USE_CHRONO_TOSTREAM_1
#cmakedefine01  USE_DATE_TOSTREAM_2
#cmakedefine01  USE_JUGAAD_TOSTREAM_3


/*
 * Failure to compile std::u16string from libstdc++ 12.1 in c++20 mode #55560 
 * https://github.com/llvm/llvm-project/issues/55560
 */
#cmakedefine01  USE_CLANG_STRING_WORKS_1
#cmakedefine01  USE_CLANG_STRING_WORKAROUND_2
#if USE_CLANG_STRING_WORKAROUND_2 == e_ENABLE_FEATURE
  #include <string>
  [[maybe_unused]]static std::u8string  clang_string_workaround(const  char8_t* a, const  char8_t* b) { return {a, b}; }
  [[maybe_unused]]static std::u16string clang_string_workaround(const char16_t* a, const char16_t* b) { return {a, b}; }
  [[maybe_unused]]static std::u32string clang_string_workaround(const char32_t* a, const char32_t* b) { return {a, b}; }
#endif


/*
 * floating-point conversion by "Elementary string conversions*" is not supported by all OSes.
 * refer "Elementary string conversions*" in the below link
 * https://en.cppreference.com/w/cpp/compiler_support/17#C.2B.2B17_library_features
 */
#cmakedefine01  USE_FLOATINGPOINT_FROM_CHARS_1
#cmakedefine01  USE_FLOATINGPOINT_TO_CHARS_1


/*
 *   AppleClang-14 doesnot support "<=>" operator.
 *   This doesn't effect the converter lib. The macro is used to toggle unit-tests.
 */
#cmakedefine01  USE_THREE_WAY_COMPARISON


/*
 * on WINDOWS os, MSVC compiler; doesn't support :
 *   1.     constexpr std::copy_n(...);
 *   2.     consteval bool operator==(const CompTimeStr<N>& other);
 */
#cmakedefine01  USE_CONSTEXPR_STRING_COPYN
#cmakedefine01  USE_CONSTEXPR_STRING_OPERATOREQUALITY

#if USE_CONSTEXPR_STRING_COPYN == e_DISABLE_FEATURE
#include <iterator>
namespace workaround {
  template<std::forward_iterator InputIt, class Size,
           std::output_iterator<decltype(*std::declval<InputIt>())> OutputIt>
  constexpr //< since C++20
  OutputIt copy_n(InputIt first, Size count, OutputIt result)
  {
    if (count > 0)
    {
      *result = *first;
      ++result;
      for (Size i = 1; i != count; ++i, (void)++result)
        *result = *++first;
    }

    return result;
  }

  template<std::forward_iterator InputIt1, std::forward_iterator InputIt2>
  constexpr //< since C++20
  bool equal(InputIt1 first1, InputIt1 last1, InputIt2 first2)
  {
    for (; first1 != last1; ++first1, ++first2)
      if (!(*first1 == *first2))
        return false;

    return true;
  }
}
#endif