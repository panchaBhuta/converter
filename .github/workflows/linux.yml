name: Linux

on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - 'docs/**'
    tags-ignore:
      - v*
  pull_request:
    branches: [ master, main ]
    paths-ignore:
      - 'docs/**'
    tags-ignore:
      - v*
  workflow_dispatch:

#env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  #BUILD_TYPE: Release


defaults:
  run:
    shell: bash

jobs:
  build-ubuntu:
    name: Build
    env:
      osComplier:
        "ubuntu-24.04"     : [ default, clang++ ] #[ g++-12, g++-13, g++-14,         clang++-16, clang++-17, clang++-18 ]
        "ubuntu-24.04-arm" : [ default, clang++ ] #[ g++-12, g++-13, g++-14,         clang++-16, clang++-17, clang++-18 ]
        "ubuntu-22.04"     : [ default, clang++ ] #[ g++-10, g++-11, g++-12,         clang++-13, clang++-14, clang++-15 ]
        "ubuntu-22.04-arm" : [ default, clang++ ] #[ g++-10, g++-11, g++-12, g++-13, clang++-13, clang++-14, clang++-15 ]
    strategy:
      fail-fast: false
      matrix:
        # https://github.com/actions/runner-images#available-images
        # https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories  (os-labels : ubuntu-22.04)
        # https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#preinstalled-software-for-github-owned-images
        os: [ ubuntu-24.04, ubuntu-22.04, ubuntu-24.04-arm, ubuntu-22.04-arm ]  #  ubuntu-latest  ==  ubuntu-24.04
        #  https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#installed-software
          #  GNU C++: 9.5.0, 10.5.0, 11.4.0, 12.3.0, 13.1.0
          #  Clang: 13.0.1, 14.0.0, 15.0.7
          #  default  ==  g++-11
          #  clang++  ==  clang++-14
        #compiler: [ default, g++-12, clang++-12, clang++-13, clang++-14 ]  :: clang++-12
        #compiler: [ g++-14 ]  # cannot be empty list
        compilerIndex: [0, 1] #[ 0, 1, 2, 3, 4, 5 ]
        #include:
        #  - os: ubuntu-24.04-arm
        #    compilerIndex : 6
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Get Version
        env :
          compilerList : ${{ env.osComplier[ matrix.os ] }}
          compiler : ${{ env.compilerList[ matrix.compilerIndex ] }}
        run: uname -a && echo "------------" && cmake --version && echo "------------" && bash -c 'COMPILER="${{env.compiler}}"; if [ "${COMPILER}" == "default" ]; then COMPILER="g++"; fi; ${COMPILER}  -dM -E - < /dev/null | egrep -i "(apple|mach|gnu|clang|version|major|minor)"'
      - name: Check Generators
        # https://stackoverflow.com/questions/25941536/what-is-a-cmake-generator
        run: cmake --help
      - name: Deploy Test-Dependencies
        run: ./make.sh deps
      - name: Configure CMake (compiler=default) [Debug]
        if: matrix.compiler == 'default'
        run: cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build-debug" -DCONVERTER_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug
      - name: Configure CMake (compiler=NOT-default) [Debug]
        env :
          compilerList : ${{ env.osComplier[ matrix.os ] }}
          compiler : ${{ env.compilerList[ matrix.compilerIndex ] }}
        if: matrix.compiler != 'default'
        run: cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build-debug" -DCONVERTER_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=${{env.compiler}}
      - name: Build [Debug]
        run: cmake --build "${{github.workspace}}/build-debug" --config Debug -j$(nproc)
      - name: Test [Debug]
        working-directory: ${{github.workspace}}/build-debug
        #run: ctest -C Debug --output-on-failure -j
        run: ctest -C Debug --verbose
      - name: Configure CMake (compiler=default) [Release]
        if: matrix.compiler == 'default'
        run: cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build-release" -DCONVERTER_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release
      - name: Configure CMake (compiler=NOT-default) [Release]
        env :
          compilerList : ${{ env.osComplier[ matrix.os ] }}
          compiler : ${{ env.compilerList[ matrix.compilerIndex ] }}
        if: matrix.compiler != 'default'
        run: cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build-release" -DCONVERTER_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=${{env.compiler}}
      - name: Build [Release]
        run: cmake --build "${{github.workspace}}/build-release" --config Release -j$(nproc)
      - name: Test [Release]
        working-directory: ${{github.workspace}}/build-release
        run: ctest -C Release --verbose
      - name: Install [Release]
        run: sudo cmake --install "${{github.workspace}}/build-release" --config Release
      - name: Check Work-Around-Flags
        run: grep define "${{github.workspace}}/build-release/include/converter/_workaroundConfig.h" | grep -v -e "^//" -e " e_[^ ]*_FEATURE "
